<?php

/**
 * @file
 * Adds ical functionality to Views, and an iCal parser to Feeds.
 *
 * TODO Figure out how to incorporate VVENUE information into the parser.
 */

/**
 * Implements hook_views_api().
 */
function date_ical_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'date_ical') . '/includes',
  );
}

/**
 * Implements hook_theme().
 */
function date_ical_theme($existing, $type, $theme, $path) {
  return array(
    'date_ical_icon' => array(
      'variables' => array('url' => NULL),
    ),
  );
}

/**
 * The theme for the ical icon.
 */
function theme_date_ical_icon($variables) {
  $url = $variables['url'];
  $variables = array(
    'path' => drupal_get_path('module', 'date_ical') . '/images/ical-feed-icon-34x14.png',
    'title' => t('Add to calendar'), t('Add to calendar'),
  );
  if ($image = theme('image', $variables)) {
    return '<a href="' . check_url($url) . '" class="ical-icon" title="ical">' . $image . '</a>';
  }
}

/**
 * Implements hook_preprocess_HOOK() for nodes.
 *
 * Hide extraneous information when printing an iCal node. The same thing can be
 * done in the theme for other entities, and this function can be overridden in
 * the theme to produce different results for nodes.
 */
function date_ical_preprocess_node(&$variables) {
  if (isset($variables['view_mode']) && $variables['view_mode'] == 'ical') {
    // We hide the page elements we won't want to see.
    // The display of the body and other fields will be controlled
    // by the Manage Display settings for the iCal view mode.
    
    // Trick the default node template into not displaying the page title by telling it this is page.
    $variables['page'] = TRUE;
    $variables['title_prefix'] = '';
    $variables['title_suffix'] = '';

    // We don't want to see the author information in our feed.
    $variables['display_submitted'] = FALSE;

    // Comments and links don't belong in an iCal feed.
    if (isset($variables['content']['comments'])) {
      unset($variables['content']['comments']);
    }
    if (isset($variables['content']['links'])) {
      unset($variables['content']['links']);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add an 'iCal' view mode for entities, which will be used by the Views style plugin.
 */
function date_ical_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $entity_type => $info) {
    if (!isset($entity_info[$entity_type]['view modes'])) {
      $entity_info[$entity_type]['view modes'] = array();
    }
    $entity_info[$entity_type]['view modes'] += array(
      'ical' => array(
        'label' => t('iCal'),
        'custom settings' => TRUE,
      ),
    );
  }
}

// TODO: I'm pretty sure the following two functions are no longer relevant, since we've moved to the iCalcreator method.
// They don't really hurt anything, though, so I've left them in for now.
/**
 * Implements hook_theme_registry_alter().
 *
 * Technique borrowed from Display Suite module.
 * Add a custom preprocess hook that will work for all types of entities
 */
function date_ical_theme_registry_alter(&$theme_registry) {
  $entity_info = entity_get_info();
  foreach ($entity_info as $entity => $info) {
    // User uses user_profile for theming.
    if ($entity == 'user') {
      $entity = 'user_profile';
    }

    // Only add preprocess functions if entity exposes theme function.
    if (isset($theme_registry[$entity])) {
      $theme_registry[$entity]['preprocess functions'][] = 'date_ical_preprocess_date_ical';
    }
  }

  // Support for File Entity.
  if (isset($theme_registry['file_entity'])) {
    $theme_registry['file_entity']['preprocess functions'][] = 'date_ical_preprocess_date_ical';
  }

  // Support for Entity API.
  if (isset($theme_registry['entity'])) {
    $theme_registry['entity']['preprocess functions'][] = 'date_ical_preprocess_date_ical';
  }
}

/**
 * Technique borrowed from Display Suite module.
 * Add ical template suggestions to all types of entities.
 */
function date_ical_preprocess_date_ical(&$vars) {
  if (isset($vars['elements']) && isset($vars['elements']['#entity_type']) && isset($vars['elements']['#bundle']) && isset($vars['view_mode']) && $vars['view_mode'] == 'ical') {
    $vars['theme_hook_suggestions'][] = $vars['elements']['#entity_type'] . '__ical';
    $vars['theme_hook_suggestions'][] = $vars['elements']['#entity_type'] . '__' . $vars['elements']['#bundle'] . '__ical';
  }
}

/**
 * Implements hook_libraries_info().
 */
function date_ical_libraries_info() {
  $libraries['iCalcreator'] = array(
    'name' => 'iCalcreator',
    'vendor url' => 'http://kigkonsult.se/iCalcreator/index.php',
    'download url' => 'http://kigkonsult.se/downloads/index.php#icalcreator',
    'version arguments' => array(
      'file' => 'iCalcreator.class.php',
      'pattern' => "/define\( 'ICALCREATOR_VERSION', 'iCalcreator ([\d\.]+)' \);/",
      'lines' => 100,
    ),
    'files' => array(
      'php' => array('iCalcreator.class.php'),
    ),
  );

  return $libraries;
}

////////////////////////////////////////////////////////////////////
// Additions from the Parser iCal module.
////////////////////////////////////////////////////////////////////
/**
 * Implementation of hook_ctools_plugin_api().
 */
function date_ical_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 2);
  }
}

/**
 * Implementation of ctools plugin for feeds hook_feeds_plugins().
 */
function date_ical_feeds_plugins() {
  $path = drupal_get_path('module', 'date_ical') . '/includes';
  $info = array();
  $info['DateIcalFeedsParser'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'DateIcalFeedsParser',
      'file' => 'DateIcalFeedsParser.inc',
      'path' => $path,
    ),
  );
  $info['DateIcalIcalcreatorParser'] = array(
    'name' => 'iCalCreator parser',
    'description' => 'Use iCalcreator to parse iCal feeds.',
    'help' => 'Parse feeds in the iCal format using the iCalcreator library.',
    'handler' => array(
      'parent' => 'DateIcalFeedsParser',
      'class' => 'DateIcalIcalcreatorParser',
      'file' => 'DateIcalIcalcreatorParser.inc',
      'path' => $path,
    ),
  );
  $info['DateIcalDateModuleParser'] = array(
    'name' => 'Date API iCal parser',
    'description' => 'Use the Date module\'s API to parse iCal feeds.',
    'help' => 'Parse feeds in the iCal format using API provided by the Date module.',
    'handler' => array(
      'parent' => 'DateIcalFeedsParser',
      'class' => 'DateIcalDateModuleParser',
      'file' => 'DateIcalDateModuleParser.inc',
      'path' => $path,
    ),
  );
  
  return $info;
}
